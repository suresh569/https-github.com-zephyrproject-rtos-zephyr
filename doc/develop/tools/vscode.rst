.. _vscode_ide:

VS Code
#######

`Visual Studio Code`_ is a popular cross-platform IDE that supports C projects and has a rich set of
extensions.

This guide describes the process of setting up VS Code for Zephyr's
:zephyr:code-sample:`blinky` sample in VS Code.

The instructions have been tested on Linux. In terms of the VSCode workflow, the steps would be the
same for macOS and Windows, but make sure to adjust the paths if needed.

Get VS Code
***********

`Download VS Code`_ and install it.

Install the required extensions through the `Extensions` marketplace in the left panel.
Search for the `C/C++ Extension Pack`_ and install it.

Initialize a new workspace
**************************

This guide gives details on how to configure the :zephyr:code-sample:`blinky`
sample application, but the instructions would be similar for any Zephyr project and :ref:`workspace
layout <west-workspaces>`.

Before you start, make sure you have a working Zephyr development environment, as per the
instructions in the :ref:`getting_started`.

Open the project in VS Code
***************************

#. In VS Code, select :menuselection:`File --> Open Folder` from the main menu.

#. Navigate to your Zephyr workspace (i.e.the :file:`zephyrproject` folder in your HOME directory if
   you have followed the Getting Started instructions), then select
   :file:`zephyr/samples/basic/blinky` or another sample project folder.

#. If prompted, enable workspace trust.

Generate compile commands
*************************

#. The setup showcased in this document relies on the `compile_commands.json` file generated by CMake
   to provide code navigation and linting capabilities. To generate this file, you need to enable the
   generation of this file through the following configuration:

#. Open your projects' CMakeLists.txt file and add the following line.
   In our case, we will add it to the :file:`samples/basic/blinky/CMakeLists.txt` file.
   ``set(CMAKE_EXPORT_COMPILE_COMMANDS ON)``

#. Build the project to generate the `compile_commands.json` file:
   ``west build -b native_posix_64 samples/basic/blinky``

Configure the C/C++ extension
*****************************

You'll now need to point to the generated `compile_commands.json` file to enable linting and code
navigation in VS Code.

#. Go to the :menuselection:`File --> Preferences --> Settings` in the VS Code top menu.

#. Search for the parameter :guilabel:`C_Cpp.default.compileCommands` and copy this path:
   ``build/compile_commands.json``.

   Linting errors in the code should now be resolved, and you should be able to navigate through the
   code.

.. _Visual Studio Code: https://code.visualstudio.com/
.. _Download VS Code: https://code.visualstudio.com/Download
.. _VS Code documentation: https://code.visualstudio.com/docs
.. _C/C++ Extension Pack: https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-extension-pack
.. _C/C++ Extension documentation: https://code.visualstudio.com/docs/languages/cpp
.. _CMake Extension documentation: https://code.visualstudio.com/docs/cpp/cmake-linux
